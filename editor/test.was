void OnMapEnter()
{
/*
	world_AddWorldArrayVar("alive entities", 128, typeof<entity_handle_t>());
	world_AddWorldVar("respawn timer", typeof<int>());
	world_AddWorldVar("wave index", typeof<int>());

	world_SetWorldVarValue("respawn timer", 300);
	world_SetWorldVarValue("wave index", 0);
*/
}


void OnMapUpdate()
{
/*
	entity_handle_t entity;
	int i;
	int c;
	int spawn_count;
	int alive_entities = 0;

	mat3_t entity_orientation;
	entity_handle_t spawned;
	entity_handle_t enemy_def;

	int spawn_timer;
	int wave_index;

	int x;
	int z;

	world_GetWorldVarValue("respawn timer", spawn_timer);

	if(spawn_timer > 0)
	{
        spawn_timer--;
		world_SetWorldVarValue("respawn timer", spawn_timer);
	}
	else if(spawn_timer == 0)
	{
		spawn_timer = -1;
		world_SetWorldVarValue("respawn timer", spawn_timer);

		world_GetWorldVarValue("wave index", wave_index);

		switch(wave_index)
		{
			case 0:
				spawn_count = 10;
			break;

			case 1:
				spawn_count = 50;
			break;

			case 2:
				spawn_count = 100;
			break;

			case 3:
				spawn_count = 150;
			break;

			default:
				spawn_count = 250;
			break;

		}

        world_ClearWorldArrayVar("alive entities");
		enemy_def = entity_GetEntity("enemy entity", 1);
		entity_orientation.identity();

		for(i = 0; i < spawn_count; i++)
		{

			x = i % 10;

			z = i / 10;

			spawned = entity_SpawnEntity(entity_orientation, vec3_t(-5.0 + x, 3.0, (-z / 2) + z * 2), vec3_t(1.0, 1.0, 1.0), enemy_def, "enemy");
			entity_SetEntityVelocity(spawned, vec3_t(0.0, 0.0, 0.0));
			world_AppendWorldArrayVarValue("alive entities", spawned);
		}
	}
	else if(spawn_timer < 0)
	{
		c = world_GetWorldArrayVarLenght("alive entities");
		alive_entities = 0;

		for(i = 0; i < c; i++)
		{
			world_GetWorldArrayVarValue("alive entities", i, spawned);

			if(entity_IsEntityValid(spawned) != 0)
			{
				alive_entities++;
			}

		}

		if(alive_entities == 0)
		{
            world_SetWorldVarValue("respawn timer", 300);

            world_GetWorldVarValue("wave index", wave_index);
            wave_index++;
            world_SetWorldVarValue("wave index", wave_index);
		}
	}

*/
}



